# generated by datamodel-codegen:
#   timestamp: 2022-09-21T03:41:58+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel
from pydantic import Field
from pydantic import constr


class Model(BaseModel):
    __root__: Any


class PluginInputType(Enum):
    path = "path"
    string = "string"
    number = "number"
    array = "array"
    boolean = "boolean"


class PluginInput(BaseModel):
    format: str | None = Field(None, title="Format")
    label: str | None = Field(None, title="Label")
    name: str = Field(..., title="Name")
    required: bool = Field(..., title="Required")
    type: PluginInputType
    default: str | float | bool | None = Field(None, title="Default")


class PluginOutputType(Enum):
    path = "path"


class PluginOutput(BaseModel):
    format: str | None = Field(None, title="Format")
    label: str | None = Field(None, title="Label")
    name: str = Field(..., title="Name")
    type: PluginOutputType


class GpuVendor(Enum):
    none = "none"
    amd = "amd"
    tpu = "tpu"
    nvidia = "nvidia"


class PluginHardwareRequirements(BaseModel):
    coresMax: str | float | None = Field(None, title="Coresmax")
    coresMin: str | float | None = Field(None, title="Coresmin")
    cpuAVX: bool | None = Field(None, title="Cpuavx")
    cpuAVX2: bool | None = Field(None, title="Cpuavx2")
    cpuMin: str | None = Field(None, title="Cpumin")
    gpu: GpuVendor | None = None
    gpuCount: float | None = Field(None, title="Gpucount")
    gpuDriverVersion: str | None = Field(None, title="Gpudriverversion")
    gpuType: str | None = Field(None, title="Gputype")
    outDirMax: str | float | None = Field(None, title="Outdirmax")
    outDirMin: str | float | None = Field(None, title="Outdirmin")
    ramMax: str | float | None = Field(None, title="Rammax")
    ramMin: str | float | None = Field(None, title="Rammin")
    tmpDirMax: str | float | None = Field(None, title="Tmpdirmax")
    tmpDirMin: str | float | None = Field(None, title="Tmpdirmin")


class ThenEntry(BaseModel):
    action: str = Field(..., title="Action")
    input: str = Field(..., title="Input")
    value: str = Field(..., title="Value")


class ConditionEntry(BaseModel):
    expression: str = Field(..., title="Expression")


class Validator(BaseModel):
    then: list[ThenEntry] | None = Field(None, title="Then")
    validator: list[ConditionEntry] | None = Field(None, title="Validator")


class PluginUIType(Enum):
    checkbox = "checkbox"
    color = "color"
    date = "date"
    email = "email"
    number = "number"
    password = "password"
    radio = "radio"
    range = "range"
    text = "text"
    time = "time"


class PluginUIInput(BaseModel):
    bind: str | None = Field(None, title="Bind")
    condition: list[Validator] | str | None = Field(None, title="Condition")
    default: str | float | bool | None = Field(None, title="Default")
    description: str | None = Field(None, title="Description")
    fieldset: list[str] | None = Field(None, title="Fieldset")
    hidden: bool | None = Field(None, title="Hidden")
    key: str = Field(..., title="Key")
    title: str = Field(..., title="Title")
    type: PluginUIType


class PluginUIOutput(BaseModel):
    description: str = Field(..., title="Description")
    format: str | None = Field(None, title="Format")
    name: str = Field(..., title="Name")
    type: PluginUIType
    website: str | None = Field(None, title="Website")


class PluginSchema(BaseModel):
    author: str | None = Field(None, title="Author")
    baseCommand: list[str] | None = Field(None, title="Basecommand")
    citation: str | None = Field(None, title="Citation")
    containerId: str = Field(..., title="Containerid")
    customInputs: bool | None = Field(None, title="Custominputs")
    description: str = Field(..., title="Description")
    inputs: list[PluginInput] = Field(..., title="Inputs")
    institution: str | None = Field(None, title="Institution")
    name: str = Field(..., title="Name")
    outputs: list[PluginOutput] = Field(..., title="Outputs")
    pluginHardwareRequirements: PluginHardwareRequirements
    repository: str | None = Field(None, title="Repository")
    title: str = Field(..., title="Title")
    ui: list[PluginUIInput | PluginUIOutput] = Field(..., title="Ui")
    version: constr(
        regex=r"^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$",
    ) = Field(..., examples=["0.1.0", "0.1.0rc1"], title="Version")
    website: str | None = Field(None, title="Website")
